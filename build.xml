<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE project [
  <!ENTITY jslint SYSTEM "build_tools/fulljslint.js">
]>
<project name="sarissa" default="dist" basedir=".">
	<description> 
 ################################################################
 Ant build file for Sarissa project (because building a 
 javascript project with Ant sounds so stupid, it is cool). 
 More info at http://sarissa.sf.net
		
 This build file uses JSLint, Copyright (c) 2002 Douglas 
 Crockford  (www.JSLint.com). Cool license.
 
 Sarissa is free software distributed under the 
  * GNU GPL version 2 (see doc/gpl.txt) or higher, 
  * GNU LGPL version 2.1 (see doc/lgpl.txt) or higher and 
  * Apache Software License 2.0 or higher (see doc/asl.txt). 
 This means you can choose one or more out of the three and use 
 follow that.
		
 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY 
 KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE 
 WARRANTIES OF MERCHANTABILITY,FITNESS FOR A PARTICULAR PURPOSE 
 AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR 
 COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR 
 OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE 
 SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
################################################################
	</description>
	<property file="manos.properties"/>
	<property name="dist.dir" location="dist"/>
	<property name="doc.dir" location="doc"/>
	<property name="src.dir" location="${basedir}"/>
	<property name="jsdoc.dist.dir" location="build_tools/jsdoc"/>
	<property name="jsdoc.out.dir" location="jsdoc_out"/>
	<target name="clean" description="Deletes all generated files and directories">
		<delete dir="${dist.dir}"/>
		<delete dir="${jsdoc.out.dir}"/>
	</target>
	<target name="init" depends="clean">
		<tstamp/>
		<mkdir dir="${dist.dir}/temp"/>
		<mkdir dir="${dist.dir}/temp/doc"/>
		<copy todir="${dist.dir}/temp">
			<fileset dir="${basedir}" includes="build_tools/ecmaunit/*.*"     excludes="**/cvs/**"/>
			<fileset dir="${basedir}" includes="sarissa*.js"                  excludes="**/cvs/**"/>
			<fileset dir="${basedir}" includes="CHANGELOG.txt"                excludes="**/cvs/**"/>
			<fileset dir="${basedir}" includes="doc/**/*.*"                   excludes="**/cvs/**,jsdoc-project-summary"/>
			<fileset dir="${basedir}" includes="sample-apps/minesweeper/**/*" excludes="**/cvs/**"/>
		</copy>
		<replace dir="${dist.dir}/temp" token="@sarissa.version@" value="${sarissa.version}"/>
		<!-- convert tabs to spaces, and make files more friendly to windows user's editors (EOL, EOF) -->
		<fixcrlf srcdir="${dist.dir}/temp" tab="remove" tablength="4" javafiles="no" eol="lf" eof="remove" 
			excludes="build_tools/**/*" 
			includes="**/*.js, **/*.html, **/*.xml, **/*.txt"/>
	</target>
	<target name="jsdoc" depends="init" description="Generates the JSdoc documentation in
		jsdoc.out.dir">
		<mkdir dir="${jsdoc.out.dir}"/>
		<exec executable="perl" failonerror="true">
			<arg line="${jsdoc.dist.dir}/jsdoc.pl  --public
                			--directory ${jsdoc.out.dir} 
	   			--project-name ${ant.project.name} 
	   			--project-summary doc/jsdoc-project-summary.xml ${dist.dir}/temp/sarissa.js ${dist.dir}/temp/sarissa_dhtml.js ${dist.dir}/temp/sarissa_ieemu_load.js ${dist.dir}/temp/sarissa_ieemu_xslt.js ${dist.dir}/temp/sarissa_ieemu_xpath.js" />
		</exec>
		<replace dir="${jsdoc.out.dir}" includes="**/*.html" token="white" value="#eeeeee"/>
		<replace dir="${jsdoc.out.dir}" includes="**/*.html" token="#EEEEFF" value="#b8cade"/>
		<copy todir="${jsdoc.out.dir}" overwrite="true">
			<fileset dir="${doc.dir}" includes="**/*.css" />
		</copy>
	</target>
	<target name="website.upload" depends="dist" description="Update SourceForge website using the JSDoc generated API documentation">
		<scp trust="yes" 
			todir="${sourceforge.username}:${sourceforge.password}@${sourceforge.webserver}:${sourceforge.htdocs.dir}">
			<fileset dir="${dist.dir}/temp" includes="**/*.*"/>
		</scp>
	</target>
	<target name="dist" depends="jsdoc" description="Assembles a destribution archive in dist.dir">
		<copy todir="${dist.dir}/temp/doc">
			<fileset dir="${jsdoc.out.dir}" includes="**/*.*" excludes="**/cvs/**"/>
		</copy>
		<zip zipfile="${dist.dir}/${ant.project.name}${sarissa.version}.zip">
			<zipfileset dir="${dist.dir}/temp" prefix="${ant.project.name}" includes="**/*.*"/>
		</zip>
	</target>
	<target name="dist.upload" description="Upload a distribution zip to SourceForge">
		<available file="${dist.dir}/${ant.project.name}${sarissa.version}.zip"
			property="release.available"/>
		<fail unless="release.available" message="No distribution file with name:
			'${ant.project.name}${sarissa.version}.zip' available, build with 'ant dist' to upload"/>
		<fail unless="sourceforge.password" message="Please specify sourceforge.password (typicaly
			your email address) with '-Dsourceforge.password=&lt;value&gt;' "/>
		<echo>Uploading '${ant.project.name}${sarissa.version}.zip' to '${sourceforge.server}'</echo>
		<ftp server="${sourceforge.server}" remotedir="${sourceforge.dir}"
			userid="${sourceforge.userid}" password="${sourceforge.password}" verbose="yes"
			binary="yes" passive="yes">
			<fileset dir="${dist.dir}" includes="${ant.project.name}${sarissa.version}.zip"/>
		</ftp>
	</target>
 
    <target name="jslint" description="Run JSLint against the Sarissa scripts">
        <scriptdef name="jslint" language="javascript">
            <element name="fileset" type="fileset"/>
// include jslint, The JavaScript Verifier   
&jslint;
         
// Our code now
<![CDATA[
// used to format JSLint's output for the command line
function html2text( html ){
         return html.replace( /<[^>]*>/g, '' ).
            replace( /&quot;/g, '"' ).
            replace( /&lt;/g, '<' ).
            replace( /&amp;/g, '&' );
}
         
function go(sScript){
         jslint.laxLineEnd = false;
         jslint.plusplus = true;
         jslint.cap = false;
         jslint.jscript = false;
         jslint(sScript);
         var r = jslint.report();
         project.log(html2text(r));
};

var filesets = elements.get("fileset");
project.log("Number of filesets = " + filesets.size());
// iterate over given filesets
for (i = 0; i < filesets.size(); ++i) {
    var fileset = filesets.get(i);
    var fileSetBaseDir = fileset.getDir(project);
    project.log("Processing fileset " + i + ", basedir = " + fileSetBaseDir);
    var directoryScanner = fileset.getDirectoryScanner(project);
    var filePaths = directoryScanner.getIncludedFiles();
    // iterate over files in current fileset
    for(i=0; i < filePaths.length; i++){
        var file = new java.io.File(fileSetBaseDir, filePaths[i]);
        project.log("\nProcessing: "+file.getAbsolutePath());
        var bufferedReader = new java.io.BufferedReader(new java.io.FileReader(file));
        var sScript = "";
        while ((line = bufferedReader.readLine())){
            sScript += (line + "\n");
        };
        
        // feed jslint   
        go(sScript);
    };
};
            
]]>   
        </scriptdef>
     
        <jslint>
            <fileset dir="${src.dir}">
                <include name="*js"/>
             </fileset>
         </jslint>   
    </target>   
 </project>
