<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE includes [
  <!ENTITY jslint SYSTEM "build_tools/fulljslint.js">
]>   
<project name="sarissa" default="dist" basedir=".">
	<description> Ant build file for Sarissa project (because building a javascript project with Ant
		is cool) More info at http://sarissa.sf.net </description>
	<property file="manos.properties"/>
	<property name="dist.dir" location="dist"/>
	<property name="doc.dir" location="doc"/>
	<property name="src.dir" location="${basedir}"/>
	<property name="jsdoc.dist.dir" location="build_tools/jsdoc"/>
	<property name="jsdoc.out.dir" location="jsdoc_out"/>
	<target name="clean" description="Deletes all generated files and directories">
		<delete dir="${dist.dir}"/>
		<delete dir="${jsdoc.out.dir}"/>
	</target>
	<target name="init" depends="clean">
		<tstamp/>
		<mkdir dir="${dist.dir}/temp"/>
		<mkdir dir="${dist.dir}/temp/doc"/>
		<mkdir dir="${dist.dir}/temp/sample-apps"/>
		<copy todir="${dist.dir}/temp">
			<fileset dir="${basedir}" includes="build_tools/ecmaunit/*.*" excludes="**/cvs/**"/>
			<fileset dir="${src.dir}" includes="sarissa*.js" excludes="**/cvs/**"/>
			<fileset dir="${src.dir}" includes="testsarissa.*" excludes="**/cvs/**"/>
			<fileset dir="${src.dir}" includes="test*.xml" excludes="**/cvs/**"/>
			<fileset dir="${src.dir}" includes="CHANGELOG.txt" excludes="**/cvs/**"/>
		</copy>
		<copy todir="${dist.dir}/temp/doc">
			<fileset dir="${doc.dir}" includes="samples/*" excludes="**/cvs/**"/>
			<fileset dir="${doc.dir}" includes="*.txt" excludes="**/cvs/**"/>
		</copy>
		<copy todir="${dist.dir}/temp/sample-apps">
			<fileset dir="sample-apps">
				<include name="minesweeper/**/*"/>
				<exclude name="**/cvs/**"/>
			</fileset>
		</copy>
		<replace dir="${dist.dir}/temp" token="@sarissa.version@" value="${sarissa.version}"/>
		<fixcrlf srcdir="${dist.dir}/temp" tab="remove" tablength="4" javafiles="no"
			includes="**/*.js"/>
	</target>
	<target name="jsdoc" depends="init" description="Generates the JSdoc documentation in
		jsdoc.out.dir">
		<mkdir dir="${jsdoc.out.dir}"/>
		<exec executable="perl" failonerror="true">
			<arg line="${jsdoc.dist.dir}/jsdoc.pl  --public
                			--directory ${jsdoc.out.dir} 
	   			--project-name ${ant.project.name} 
	   			--project-summary doc/jsdoc-project-summary ${dist.dir}/temp/sarissa.js ${dist.dir}/temp/sarissa_dhtml.js ${dist.dir}/temp/sarissa_ieemu_xslt.js ${dist.dir}/temp/sarissa_ieemu_xpath.js" />
		</exec>
	</target>
	<target name="website.upload" depends="dist" description="Update SourceForge website using the
		JSDoc generated API documentation">
		<scp trust="yes" 
			todir="${sourceforge.username}:${sourceforge.password}@${sourceforge.webserver}:${sourceforge.htdocs.dir}">
			<fileset dir="${dist.dir}/temp" includes="**/*.*"/>
		</scp>
	</target>
	<target name="dist" depends="jsdoc" description="Assembles a destribution archive in dist.dir">
		<copy todir="${dist.dir}/temp/doc">
			<fileset dir="${jsdoc.out.dir}" includes="**/*.*" excludes="**/cvs/**"/>
		</copy>
		<zip zipfile="${dist.dir}/${ant.project.name}${sarissa.version}.zip">
			<zipfileset dir="${dist.dir}/temp" prefix="${ant.project.name}" includes="**/*.*"/>
		</zip>
	</target>
	<target name="dist.upload" description="Upload a distribution zip to SourceForge">
		<available file="${dist.dir}/${ant.project.name}${sarissa.version}.zip"
			property="release.available"/>
		<fail unless="release.available" message="No distribution file with name:
			'${ant.project.name}${sarissa.version}.zip' available, build with 'ant dist' to upload"/>
		<fail unless="sourceforge.password" message="Please specify sourceforge.password (typicaly
			your email address) with '-Dsourceforge.password=&lt;value&gt;' "/>
		<echo>Uploading '${ant.project.name}${sarissa.version}.zip' to '${sourceforge.server}'</echo>
		<ftp server="${sourceforge.server}" remotedir="${sourceforge.dir}"
			userid="${sourceforge.userid}" password="${sourceforge.password}" verbose="yes"
			binary="yes" passive="yes">
			<fileset dir="${dist.dir}" includes="${ant.project.name}${sarissa.version}.zip"/>
		</ftp>
	</target>
 
    <target name="jslint">
        <scriptdef name="jslint" language="javascript">
            <element name="fileset" type="fileset"/>
// include jslint, The JavaScript Verifier   
&jslint;
         
// Our code now
<![CDATA[
// used to format JSLint's output for the command line
function html2text( html ){
         return html.replace( /<[^>]*>/g, '' ).
            replace( /&quot;/g, '"' ).
            replace( /&lt;/g, '<' ).
            replace( /&amp;/g, '&' );
}
         
function go(sScript){
         jslint.laxLineEnd = false;
         jslint.plusplus = true;
         jslint.cap = false;
         jslint.jscript = false;
         jslint(sScript);
         var r = jslint.report();
         project.log(html2text(r));
};

var filesets = elements.get("fileset");
project.log("Number of filesets = " + filesets.size());
// iterate over given filesets
for (i = 0; i < filesets.size(); ++i) {
    var fileset = filesets.get(i);
    var fileSetBaseDir = fileset.getDir(project);
    project.log("Processing fileset " + i + ", basedir = " + fileSetBaseDir);
    var directoryScanner = fileset.getDirectoryScanner(project);
    var filePaths = directoryScanner.getIncludedFiles();
    // iterate over files in current fileset
    for(i=0; i < filePaths.length; i++){
        var file = new java.io.File(fileSetBaseDir, filePaths[i]);
        project.log("\nProcessing: "+file.getAbsolutePath());
        var bufferedReader = new java.io.BufferedReader(new java.io.FileReader(file));
        var sScript = "";
        while ((line = bufferedReader.readLine())){
            sScript += (line + "\n");
        };
        
        // feed jslint   
        go(sScript);
    };
};
            
]]>   
        </scriptdef>
     
        <jslint>
            <fileset dir="${src.dir}">
                <include name="*js"/>
             </fileset>
         </jslint>   
    </target>   
 </project>
