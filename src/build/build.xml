<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE project [
  <!ENTITY jslint SYSTEM "./fulljslint.js">
]>
<project name="sarissa" default="dist" basedir="../../">
	<description> 
 ################################################################
 Ant build file for Sarissa project (because building a 
 javascript project with Ant sounds so stupid, it is cool). 
 More info at http://sarissa.sf.net
		
 This build file uses JSLint, Copyright (c) 2002 Douglas 
 Crockford  (www.JSLint.com). Cool license.
 
 Sarissa is free software distributed under the 
  * GNU GPL version 2 (see doc/gpl.txt) or higher, 
  * GNU LGPL version 2.1 (see doc/lgpl.txt) or higher and 
  * Apache Software License 2.0 or higher (see doc/asl.txt). 
 This means you can choose one or more out of the three and use 
 follow that.
		
 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY 
 KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE 
 WARRANTIES OF MERCHANTABILITY,FITNESS FOR A PARTICULAR PURPOSE 
 AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR 
 COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR 
 OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE 
 SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
################################################################
	</description>
    
    <property name="jsdoc.dist.dir" location="src/build/jsdoc"/>
    
    <target name="generate-resources">
        <!--
            Generate JSDoc documentation and add it to the site 
        -->
        <mkdir dir="${project.reporting.outputDirectory}/jsdoc"/>
        <exec executable="perl" failonerror="true">
            <arg line="${jsdoc.dist.dir}/jsdoc.pl  --public
                --directory ${project.reporting.outputDirectory}/jsdoc
                --project-name ${ant.project.name} 
                src/main/js/sarissa.js src/main/js/sarissa_dhtml.js src/main/js/sarissa_ieemu_load.js src/main/js/sarissa_ieemu_xslt.js src/main/js/sarissa_ieemu_xpath.js" />
        </exec>
        <replace dir="${project.reporting.outputDirectory}/jsdoc" includes="**/*.html" token="white" value="#eeeeee"/>
        <replace dir="${project.reporting.outputDirectory}/jsdoc" includes="**/*.html" token="#EEEEFF" value="#b8cade"/>
    </target>
    
    <target name="process-resources">
        <!--
            Copy generated site in  ${project.build.directory}/classes/documentation
            so that they can be included in the generated package. Note that the site 
            has already been generated in the generate-resources phase.
        -->
        <mkdir dir="${project.build.directory}/classes/documentation"/>
        <copy todir="${project.build.directory}/classes/documentation">
            <fileset dir="${project.reporting.outputDirectory}"/>
        </copy>
        <!-- Overwrite jsdoc css -->
        <copy todir="${project.reporting.outputDirectory}/jsdoc">
            <fileset dir="${project.reporting.outputDirectory}/css">
                <include name="${ant.project.name}.css" />
            </fileset>
        </copy>
        <move file="${project.reporting.outputDirectory}/jsdoc/${ant.project.name}.css" tofile="${project.reporting.outputDirectory}/jsdoc/stylesheet.css"/>
    </target>
	 
    <target name="test" description="">
        <!-- 
            Run JSLint against the Sarissa scripts
        -->
        
        <scriptdef name="jslint" language="javascript" classpathref="maven.plugin.classpath">
            <element name="fileset" type="fileset"/>
// include jslint, The JavaScript Verifier using an entity 
&jslint;
         
// Our code now
<![CDATA[
// used to format JSLint's output for the command line
function html2text( html ){
         return html.replace( /<[^>]*>/g, '' ).
            replace( /&quot;/g, '"' ).
            replace( /&lt;/g, '<' ).
            replace( /&amp;/g, '&' );
}
         
function go(sScript){
         jslint.laxLineEnd = false;
         jslint.plusplus = true;
         jslint.cap = false;
         jslint.jscript = false;
         jslint(sScript);
         var r = jslint.report();
         project.log(html2text(r));
};

var filesets = elements.get("fileset");
project.log("Number of filesets = " + filesets.size());
// iterate over given filesets
for (i = 0; i < filesets.size(); ++i) {
    var fileset = filesets.get(i);
    var fileSetBaseDir = fileset.getDir(project);
    project.log("Processing fileset " + i + ", basedir = " + fileSetBaseDir);
    var directoryScanner = fileset.getDirectoryScanner(project);
    var filePaths = directoryScanner.getIncludedFiles();
    // iterate over files in current fileset
    for(i=0; i < filePaths.length; i++){
        var file = new java.io.File(fileSetBaseDir, filePaths[i]);
        project.log("\nProcessing: "+file.getAbsolutePath());
        var bufferedReader = new java.io.BufferedReader(new java.io.FileReader(file));
        var sScript = "";
        while ((line = bufferedReader.readLine())){
            sScript += (line + "\n");
        };
        
        // feed jslint   
        go(sScript);
    };
};
            
]]>   
        </scriptdef>
     
        <jslint>
            <fileset dir="src/main/js">
                <include name="*js"/>
             </fileset>
         </jslint>   
    </target>   
 </project>
